generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_DIRECT_URL")
}

model User {
    id                 Int              @id @default(autoincrement())
    email              String           @db.VarChar(255)
    username           String           @db.VarChar(255)
    theme              String           @default("dark") @db.VarChar(255)
    first_login        Boolean          @default(true)
    external_id        String
    prompts            Prompt[]
    modifiers          Modifier[]
    templates          Template[]
    repositories       Repository[]
    users_repositories UserRepository[]

    @@unique([email])
    @@unique([external_id])
    @@index([email])
    @@index([external_id])
    @@map("users")
}

model Language {
    id        Int        @id @default(autoincrement())
    name      String     @db.VarChar(255)
    slug      String     @db.VarChar(255)
    prompts   Prompt[]
    modifiers Modifier[]
    templates Template[]

    @@unique([slug])
    @@map("languages")
}

model Repository {
    id                 Int              @id @default(autoincrement())
    name               String           @db.VarChar(255)
    slug               String?          @db.VarChar(255)
    user_id            Int
    prompts            Prompt[]
    modifiers          Modifier[]
    templates          Template[]
    user               User             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users_repositories UserRepository[]

    @@unique([user_id, slug])
    @@map("repositories")
}

model Technology {
    id         Int         @id @default(autoincrement())
    name       String      @db.VarChar
    slug       String      @db.VarChar
    default    Boolean?
    providers  Provider[]
    prompts    Prompt[]
    templates  Template[]
    modifier   Modifier[]
    parameters Parameter[]

    @@unique([slug])
    @@map("technologies")
}

model Provider {
    id            Int         @id @default(autoincrement())
    name          String      @db.VarChar(255)
    slug          String      @db.VarChar(255)
    model_name    String      @db.VarChar(255)
    model_slug    String      @db.VarChar(255)
    technology_id Int
    technology    Technology  @relation(fields: [technology_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    prompts       Prompt[]
    templates     Template[]
    modifier      Modifier[]
    parameters    Parameter[]

    @@unique([slug, model_slug])
    @@map("providers")
}

model Parameter {
    id                 Int               @id @default(autoincrement())
    name               String            @db.VarChar(255)
    slug               String            @db.VarChar(255)
    content            Json              @db.Json
    technology_id      Int
    provider_id        Int
    technology         Technology        @relation(fields: [technology_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    provider           Provider          @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    prompts_parameters PromptParameter[]

    @@unique([slug])
    @@map("parameters")
}

model Prompt {
    id                    Int                 @id @default(autoincrement())
    title                 String              @db.VarChar(255)
    slug                  String              @db.VarChar(255)
    content               String
    hash                  String
    description           String?
    stars                 Int                 @default(0)
    plays                 Int                 @default(0)
    created_at            DateTime            @default(now()) @db.Timestamptz(6)
    updated_at            DateTime            @default(now()) @db.Timestamptz(6)
    language_id           Int
    repository_id         Int
    technology_id         Int
    provider_id           Int?
    user_id               Int
    history               Json?
    public                Boolean             @default(false)
    language              Language            @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    repository            Repository          @relation(fields: [repository_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    technology            Technology          @relation(fields: [technology_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    provider              Provider?           @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user                  User                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    prompts_parameters    PromptParameter[]
    prompts_templates     PromptTemplate[]
    prompts_modifiers     PromptModifier[]
    prompts_chat_messages PromptChatMessage[]

    @@index(fields: [hash], type: Hash)
    @@unique([slug, language_id, repository_id, technology_id])
    @@map("prompts")
}

model Template {
    id                  Int                @id @default(autoincrement())
    title               String             @db.VarChar(255)
    slug                String             @db.VarChar(255)
    description         String?
    stars               Int                @default(0)
    plays               Int                @default(0)
    created_at          DateTime           @default(now()) @db.Timestamptz(6)
    updated_at          DateTime           @default(now()) @db.Timestamptz(6)
    language_id         Int
    repository_id       Int
    technology_id       Int
    provider_id         Int?
    user_id             Int
    language            Language           @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    repository          Repository         @relation(fields: [repository_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    technology          Technology         @relation(fields: [technology_id], references: [id])
    provider            Provider?          @relation(fields: [provider_id], references: [id])
    user                User               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    prompts_templates   PromptTemplate[]
    templates_modifiers TemplateModifier[]

    @@unique([slug, language_id, repository_id])
    @@map("templates")
}

model Modifier {
    id                  Int                @id @default(autoincrement())
    title               String             @db.VarChar(255)
    slug                String             @db.VarChar(255)
    content             String
    description         String?
    stars               Int                @default(0)
    plays               Int                @default(0)
    created_at          DateTime           @default(now()) @db.Timestamptz(6)
    updated_at          DateTime           @default(now()) @db.Timestamptz(6)
    language_id         Int
    repository_id       Int
    technology_id       Int
    provider_id         Int?
    user_id             Int
    public              Boolean            @default(false)
    language            Language           @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    repository          Repository         @relation(fields: [repository_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    technology          Technology         @relation(fields: [technology_id], references: [id])
    provider            Provider?          @relation(fields: [provider_id], references: [id])
    user                User               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    prompts_modifiers   PromptModifier[]
    templates_modifiers TemplateModifier[]

    @@unique([slug, language_id, repository_id])
    @@map("modifiers")
}

model PromptChatMessage {
    id        Int    @id @default(autoincrement())
    prompt_id Int
    role      String @db.VarChar(255)
    message   String @db.Text
    prompt    Prompt @relation(fields: [prompt_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@index([prompt_id])
    @@map("prompts_chat_messages")
}

model PromptTemplate {
    prompt_id   Int
    template_id Int

    prompt   Prompt   @relation(fields: [prompt_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    template Template @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([prompt_id, template_id])
    @@map("prompts_templates")
}

model PromptModifier {
    prompt_id   Int
    modifier_id Int

    prompt   Prompt   @relation(fields: [prompt_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    modifier Modifier @relation(fields: [modifier_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([prompt_id, modifier_id])
    @@map("prompts_modifiers")
}

model TemplateModifier {
    template_id Int
    modifier_id Int

    modifier Modifier @relation(fields: [modifier_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    template Template @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([template_id, modifier_id])
    @@map("templates_modifiers")
}

model PromptParameter {
    prompt_id    Int
    parameter_id Int
    value        String?
    parameter    Parameter @relation(fields: [parameter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    prompt       Prompt    @relation(fields: [prompt_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([prompt_id, parameter_id])
    @@map("prompts_parameters")
}

model UserRepository {
    user_id       Int
    repository_id Int
    repository    Repository @relation(fields: [repository_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user          User       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([user_id, repository_id])
    @@map("users_repositories")
}
