generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_DIRECT_URL")
}

model User {
    id                 Int              @id @default(autoincrement())
    email              String           @db.VarChar(255)
    username           String           @db.VarChar(255)
    theme              String           @default("dark") @db.VarChar(255)
    first_login        Boolean          @default(true)
    external_id        String
    prompts            Prompt[]
    modifiers          Modifier[]
    templates          Template[]
    repositories       Repository[]
    users_repositories UserRepository[]

    @@unique([email])
    @@unique([external_id])
    @@index([email])
    @@index([external_id])
    @@map("users")
}

model Language {
    id        Int        @id @default(autoincrement())
    name      String     @db.VarChar(255)
    slug      String     @db.VarChar(255)
    prompts   Prompt[]
    modifiers Modifier[]
    templates Template[]

    @@unique([slug])
    @@map("languages")
}

model Repository {
    id                 Int              @id @default(autoincrement())
    name               String           @db.VarChar(255)
    slug               String?          @db.VarChar(255)
    user_id            Int
    prompts            Prompt[]
    modifiers          Modifier[]
    templates          Template[]
    user               User             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users_repositories UserRepository[]

    @@unique([user_id, slug])
    @@map("repositories")
}

model Technology {
    id                     Int                  @id @default(autoincrement())
    name                   String               @db.VarChar
    slug                   String               @db.VarChar
    default                Boolean?
    prompts                Prompt[]
    templates              Template[]
    modifier               Modifier[]
    technologies_providers TechnologyProvider[]
    parameters             Parameter[]

    @@unique([slug])
    @@map("technologies")
}

model Provider {
    id                     Int                  @id @default(autoincrement())
    name                   String               @db.VarChar(255)
    slug                   String               @db.VarChar(255)
    model_name             String               @db.VarChar(255)
    model_slug             String               @db.VarChar(255)
    prompts                Prompt[]
    templates              Template[]
    modifier               Modifier[]
    technologies_providers TechnologyProvider[]
    parameters             Parameter[]

    @@unique([slug, model_slug])
    @@map("providers")
}

model Parameter {
    id                 Int               @id @default(autoincrement())
    name               String            @db.VarChar(255)
    slug               String            @db.VarChar(255)
    content            Json              @db.Json
    technology_id      Int
    provider_id        Int
    technology         Technology        @relation(fields: [technology_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    provider           Provider          @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    prompts_parameters PromptParameter[]

    @@unique([slug])
    @@map("parameters")
}

model Prompt {
    id                 Int               @id @default(autoincrement())
    title              String            @db.VarChar(255)
    slug               String            @db.VarChar(255)
    content            String
    description        String
    stars              Int               @default(0)
    plays              Int               @default(0)
    created_at         DateTime          @default(now()) @db.Timestamptz(6)
    language_id        Int
    repository_id      Int
    technology_id      Int
    provider_id        Int
    user_id            Int
    metadata           Json?
    public             Boolean           @default(false)
    language           Language          @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    repository         Repository        @relation(fields: [repository_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    technology         Technology        @relation(fields: [technology_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    provider           Provider          @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user               User              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    prompts_parameters PromptParameter[]

    @@unique([slug, language_id, repository_id, technology_id])
    @@map("prompts")
}

model Modifier {
    id            Int        @id @default(autoincrement())
    title         String     @db.VarChar(255)
    slug          String     @db.VarChar(255)
    content       String
    description   String
    stars         Int        @default(0)
    plays         Int        @default(0)
    created_at    DateTime   @default(now()) @db.Timestamptz(6)
    language_id   Int
    repository_id Int
    technology_id Int
    provider_id   Int
    user_id       Int
    metadata      Json?
    public        Boolean    @default(false)
    language      Language   @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    repository    Repository @relation(fields: [repository_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    technology    Technology @relation(fields: [technology_id], references: [id])
    provider      Provider   @relation(fields: [provider_id], references: [id])
    user          User       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([slug, language_id, repository_id])
    @@map("modifiers")
}

model Template {
    id            Int        @id @default(autoincrement())
    title         String     @db.VarChar(255)
    slug          String     @db.VarChar(255)
    description   String
    stars         Int        @default(0)
    plays         Int        @default(0)
    created_at    DateTime   @default(now()) @db.Timestamptz(6)
    language_id   Int
    repository_id Int
    technology_id Int
    provider_id   Int
    user_id       Int
    modifiers     Json?
    language      Language   @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    repository    Repository @relation(fields: [repository_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    technology    Technology @relation(fields: [technology_id], references: [id])
    provider      Provider   @relation(fields: [provider_id], references: [id])
    user          User       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@unique([slug, language_id, repository_id])
    @@map("templates")
}

model PromptParameter {
    prompt_id    Int
    parameter_id Int
    value        String?
    parameter    Parameter @relation(fields: [parameter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    prompt       Prompt    @relation(fields: [prompt_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([prompt_id, parameter_id])
    @@map("prompts_parameters")
}

model TechnologyProvider {
    technology_id Int
    provider_id   Int
    default       Boolean?
    provider      Provider   @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    technology    Technology @relation(fields: [technology_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([technology_id, provider_id])
    @@map("technologies_providers")
}

model UserRepository {
    user_id       Int
    repository_id Int
    repository    Repository @relation(fields: [repository_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user          User       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([user_id, repository_id])
    @@map("users_repositories")
}
