generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_DIRECT_URL")
}

model User {
    id                    Int                 @id @default(autoincrement())
    email                 String              @db.VarChar(255)
    username              String              @db.VarChar(255)
    theme                 String              @default("dark") @db.VarChar(255)
    first_login           Boolean             @default(true)
    external_id           String
    language_id           Int
    language              Language            @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    prompts               Prompt[]
    modifiers             Modifier[]
    templates             Template[]
    repositories          Repository[]
    users_repositories    UserRepository[]
    users_workspaces      UserWorkspace[]
    threads               Thread[]
    workspaces            Workspace[]
    threads_chat_messages ThreadChatMessage[]
    prompts_chat_messages PromptChatMessage[]

    @@unique([email])
    @@unique([external_id])
    @@index([email])
    @@index([external_id])
    @@map("users")
}

model Language {
    id        Int        @id @default(autoincrement())
    name      String     @db.VarChar(255)
    slug      String     @db.VarChar(255)
    default   Boolean    @default(false)
    prompts   Prompt[]
    modifiers Modifier[]
    templates Template[]
    users     User[]

    @@unique([slug])
    @@map("languages")
}

model Repository {
    id                     Int                  @id @default(autoincrement())
    name                   String               @db.VarChar(255)
    slug                   String?              @db.VarChar(255)
    user_id                Int
    default                Boolean              @default(false)
    prompts                Prompt[]
    modifiers              Modifier[]
    templates              Template[]
    user                   User                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users_repositories     UserRepository[]
    prompts_repositories   PromptRepository[]
    templates_repositories TemplateRepository[]
    modifiers_repositories ModifierRepository[]

    @@unique([user_id, slug])
    @@map("repositories")
}

model Technology {
    id        Int        @id @default(autoincrement())
    name      String     @db.VarChar
    slug      String     @db.VarChar
    default   Boolean?
    providers Provider[]
    prompts   Prompt[]
    templates Template[]
    modifier  Modifier[]
    threads   Thread[]

    @@unique([slug])
    @@map("technologies")
}

model Provider {
    id            Int         @id @default(autoincrement())
    name          String      @db.VarChar(255)
    slug          String      @db.VarChar(255)
    model_name    String      @db.VarChar(255)
    model_slug    String      @db.VarChar(255)
    technology_id Int
    technology    Technology  @relation(fields: [technology_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    prompts       Prompt[]
    templates     Template[]
    modifier      Modifier[]
    parameters    Parameter[]
    threads       Thread[]

    @@unique([slug, model_slug])
    @@map("providers")
}

model Workspace {
    id               Int             @id @default(autoincrement())
    name             String          @db.VarChar(255)
    slug             String          @db.VarChar(255)
    default          Boolean         @default(false)
    user_id          Int
    user             User            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users_workspaces UserWorkspace[]
    threads          Thread[]

    @@unique([user_id, slug])
    @@map("workspaces")
}

model Thread {
    id                    Int                 @id @default(autoincrement())
    title                 String              @db.VarChar(255)
    slug                  String              @db.VarChar(255)
    content               String
    response              String
    created_at            DateTime            @default(now()) @db.Timestamptz(6)
    key                   String
    technology_id         Int
    provider_id           Int?
    user_id               Int
    workspace_id          Int
    collapsed             Boolean             @default(false)
    technology            Technology          @relation(fields: [technology_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    provider              Provider?           @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user                  User                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    workspace             Workspace           @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    threads_chat_messages ThreadChatMessage[]
    threads_templates     ThreadTemplate[]
    threads_modifiers     ThreadModifier[]
    threads_parameters    ThreadParameter[]

    @@map("threads")
}

model Prompt {
    id                    Int                 @id @default(autoincrement())
    title                 String              @db.VarChar(255)
    slug                  String              @db.VarChar(255)
    content               String
    description           String?
    hash                  String?
    created_at            DateTime            @default(now()) @db.Timestamptz(6)
    updated_at            DateTime            @default(now()) @db.Timestamptz(6)
    language_id           Int
    repository_id         Int
    technology_id         Int
    provider_id           Int?
    user_id               Int
    history               Json?
    public                Boolean             @default(false)
    language              Language            @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    repository            Repository          @relation(fields: [repository_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    technology            Technology          @relation(fields: [technology_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    provider              Provider?           @relation(fields: [provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user                  User                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    prompts_parameters    PromptParameter[]
    prompts_templates     PromptTemplate[]
    prompts_modifiers     PromptModifier[]
    prompts_chat_messages PromptChatMessage[]
    prompts_respositories PromptRepository[]

    @@map("prompts")
}

model Template {
    id                     Int                  @id @default(autoincrement())
    title                  String               @db.VarChar(255)
    slug                   String               @db.VarChar(255)
    description            String?
    hash                   String?
    created_at             DateTime             @default(now()) @db.Timestamptz(6)
    updated_at             DateTime             @default(now()) @db.Timestamptz(6)
    language_id            Int
    repository_id          Int
    technology_id          Int
    provider_id            Int?
    user_id                Int
    language               Language             @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    repository             Repository           @relation(fields: [repository_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    technology             Technology           @relation(fields: [technology_id], references: [id])
    provider               Provider?            @relation(fields: [provider_id], references: [id])
    user                   User                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    prompts_templates      PromptTemplate[]
    templates_modifiers    TemplateModifier[]
    templates_repositories TemplateRepository[]
    templates_parameters   TemplateParameter[]
    threads_templates      ThreadTemplate[]

    @@index(fields: [hash], type: Hash)
    @@map("templates")
}

model Modifier {
    id                     Int                  @id @default(autoincrement())
    title                  String               @db.VarChar(255)
    slug                   String               @db.VarChar(255)
    content                String
    description            String?
    hash                   String?
    created_at             DateTime             @default(now()) @db.Timestamptz(6)
    updated_at             DateTime             @default(now()) @db.Timestamptz(6)
    language_id            Int
    repository_id          Int
    technology_id          Int
    provider_id            Int?
    user_id                Int
    public                 Boolean              @default(false)
    language               Language             @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    repository             Repository           @relation(fields: [repository_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    technology             Technology           @relation(fields: [technology_id], references: [id])
    provider               Provider?            @relation(fields: [provider_id], references: [id])
    user                   User                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    prompts_modifiers      PromptModifier[]
    templates_modifiers    TemplateModifier[]
    modifiers_repositories ModifierRepository[]
    threads_modifiers      ThreadModifier[]

    @@index(fields: [hash], type: Hash)
    @@map("modifiers")
}

model Parameter {
    id                   Int                 @id @default(autoincrement())
    name                 String              @db.VarChar(255)
    slug                 String              @db.VarChar(255)
    value                String
    data                 Json                @db.Json
    provider_id          Int
    provider             Provider            @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    prompts_parameters   PromptParameter[]
    templates_parameters TemplateParameter[]
    threads_parameters   ThreadParameter[]

    @@unique([slug, provider_id])
    @@map("parameters")
}

model UserWorkspace {
    user_id      Int
    workspace_id Int
    user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([user_id, workspace_id])
    @@map("users_workspaces")
}

model PromptChatMessage {
    id        Int    @id @default(autoincrement())
    prompt_id Int
    user_id   Int
    role      String @db.VarChar(255)
    message   String @db.Text
    prompt    Prompt @relation(fields: [prompt_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    user      User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([prompt_id])
    @@map("prompts_chat_messages")
}

model ThreadChatMessage {
    id        Int    @id @default(autoincrement())
    thread_id Int
    user_id   Int
    role      String @db.VarChar(255)
    message   String @db.Text
    thread    Thread @relation(fields: [thread_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    user      User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@index([thread_id])
    @@map("threads_chat_messages")
}

model PromptRepository {
    prompt_id     Int
    repository_id Int

    prompt     Prompt     @relation(fields: [prompt_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    repository Repository @relation(fields: [repository_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([prompt_id, repository_id])
    @@map("prompts_repositories")
}

model TemplateRepository {
    template_id   Int
    repository_id Int

    template   Template   @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    repository Repository @relation(fields: [repository_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([template_id, repository_id])
    @@map("templates_repositories")
}

model ModifierRepository {
    modifier_id   Int
    repository_id Int

    modifier   Modifier   @relation(fields: [modifier_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    repository Repository @relation(fields: [repository_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([modifier_id, repository_id])
    @@map("modifiers_repositories")
}

model PromptTemplate {
    prompt_id   Int
    template_id Int

    prompt   Prompt   @relation(fields: [prompt_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    template Template @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([prompt_id, template_id])
    @@map("prompts_templates")
}

model ThreadTemplate {
    thread_id   Int
    template_id Int

    thread   Thread   @relation(fields: [thread_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    template Template @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([thread_id, template_id])
    @@map("threads_templates")
}

model PromptModifier {
    prompt_id   Int
    modifier_id Int

    prompt   Prompt   @relation(fields: [prompt_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    modifier Modifier @relation(fields: [modifier_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([prompt_id, modifier_id])
    @@map("prompts_modifiers")
}

model ThreadModifier {
    thread_id   Int
    modifier_id Int

    thread   Thread   @relation(fields: [thread_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    modifier Modifier @relation(fields: [modifier_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([thread_id, modifier_id])
    @@map("threads_modifiers")
}

model TemplateModifier {
    template_id Int
    modifier_id Int

    modifier Modifier @relation(fields: [modifier_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    template Template @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([template_id, modifier_id])
    @@map("templates_modifiers")
}

model PromptParameter {
    prompt_id    Int
    parameter_id Int
    value        String?
    parameter    Parameter @relation(fields: [parameter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    prompt       Prompt    @relation(fields: [prompt_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([prompt_id, parameter_id])
    @@map("prompts_parameters")
}

model ThreadParameter {
    thread_id    Int
    parameter_id Int
    value        String?
    parameter    Parameter @relation(fields: [parameter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    thread       Thread    @relation(fields: [thread_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([thread_id, parameter_id])
    @@map("threads_parameters")
}

model TemplateParameter {
    template_id  Int
    parameter_id Int
    value        String?
    parameter    Parameter @relation(fields: [parameter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
    template     Template  @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([template_id, parameter_id])
    @@map("templates_parameters")
}

model UserRepository {
    user_id       Int
    repository_id Int
    repository    Repository @relation(fields: [repository_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user          User       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@id([user_id, repository_id])
    @@map("users_repositories")
}
